// Mocks generated by Mockito 5.3.0 from annotations
// in c/test/cmd2_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:c/md.dart' as _i2;
import 'package:c/src/md.quote.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ChetroStyle].
///
/// See the documentation for Mockito's code generation for more information.
class MockChetroStyle extends _i1.Mock implements _i2.ChetroStyle {
  MockChetroStyle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get canQuote =>
      (super.noSuchMethod(Invocation.getter(#canQuote), returnValue: false)
          as bool);
  @override
  bool get canUseShortAccumulated =>
      (super.noSuchMethod(Invocation.getter(#canUseShortAccumulated),
          returnValue: false) as bool);
  @override
  bool get canUseParameters =>
      (super.noSuchMethod(Invocation.getter(#canUseParameters),
          returnValue: false) as bool);
  @override
  bool get canUseValuables => (super
          .noSuchMethod(Invocation.getter(#canUseValuables), returnValue: false)
      as bool);
  @override
  set canQuote(bool? _canQuote) =>
      super.noSuchMethod(Invocation.setter(#canQuote, _canQuote),
          returnValueForMissingStub: null);
  @override
  set canUseShortAccumulated(bool? _canUseShortAccumulated) =>
      super.noSuchMethod(
          Invocation.setter(#canUseShortAccumulated, _canUseShortAccumulated),
          returnValueForMissingStub: null);
  @override
  set canUseParameters(bool? _canUseParameters) => super.noSuchMethod(
      Invocation.setter(#canUseParameters, _canUseParameters),
      returnValueForMissingStub: null);
  @override
  set canUseValuables(bool? _canUseValuables) =>
      super.noSuchMethod(Invocation.setter(#canUseValuables, _canUseValuables),
          returnValueForMissingStub: null);
  @override
  List<_i3.Quote> get quoteChars =>
      (super.noSuchMethod(Invocation.getter(#quoteChars),
          returnValue: <_i3.Quote>[]) as List<_i3.Quote>);
  @override
  String get escapeChar =>
      (super.noSuchMethod(Invocation.getter(#escapeChar), returnValue: '')
          as String);
}

/// A class which mocks [PosixStyle].
///
/// See the documentation for Mockito's code generation for more information.
class MockPosixStyle extends _i1.Mock implements _i2.PosixStyle {
  MockPosixStyle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get canQuote =>
      (super.noSuchMethod(Invocation.getter(#canQuote), returnValue: false)
          as bool);
  @override
  bool get canUseShortAccumulated =>
      (super.noSuchMethod(Invocation.getter(#canUseShortAccumulated),
          returnValue: false) as bool);
  @override
  bool get canUseParameters =>
      (super.noSuchMethod(Invocation.getter(#canUseParameters),
          returnValue: false) as bool);
  @override
  bool get canUseValuables => (super
          .noSuchMethod(Invocation.getter(#canUseValuables), returnValue: false)
      as bool);
  @override
  set canQuote(bool? _canQuote) =>
      super.noSuchMethod(Invocation.setter(#canQuote, _canQuote),
          returnValueForMissingStub: null);
  @override
  set canUseShortAccumulated(bool? _canUseShortAccumulated) =>
      super.noSuchMethod(
          Invocation.setter(#canUseShortAccumulated, _canUseShortAccumulated),
          returnValueForMissingStub: null);
  @override
  set canUseParameters(bool? _canUseParameters) => super.noSuchMethod(
      Invocation.setter(#canUseParameters, _canUseParameters),
      returnValueForMissingStub: null);
  @override
  set canUseValuables(bool? _canUseValuables) =>
      super.noSuchMethod(Invocation.setter(#canUseValuables, _canUseValuables),
          returnValueForMissingStub: null);
  @override
  List<_i3.Quote> get quoteChars =>
      (super.noSuchMethod(Invocation.getter(#quoteChars),
          returnValue: <_i3.Quote>[]) as List<_i3.Quote>);
  @override
  String get escapeChar =>
      (super.noSuchMethod(Invocation.getter(#escapeChar), returnValue: '')
          as String);
}

/// A class which mocks [GNUStyle].
///
/// See the documentation for Mockito's code generation for more information.
class MockGNUStyle extends _i1.Mock implements _i2.GNUStyle {
  MockGNUStyle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get canQuote =>
      (super.noSuchMethod(Invocation.getter(#canQuote), returnValue: false)
          as bool);
  @override
  bool get canUseShortAccumulated =>
      (super.noSuchMethod(Invocation.getter(#canUseShortAccumulated),
          returnValue: false) as bool);
  @override
  bool get canUseParameters =>
      (super.noSuchMethod(Invocation.getter(#canUseParameters),
          returnValue: false) as bool);
  @override
  bool get canUseValuables => (super
          .noSuchMethod(Invocation.getter(#canUseValuables), returnValue: false)
      as bool);
  @override
  set canQuote(bool? _canQuote) =>
      super.noSuchMethod(Invocation.setter(#canQuote, _canQuote),
          returnValueForMissingStub: null);
  @override
  set canUseShortAccumulated(bool? _canUseShortAccumulated) =>
      super.noSuchMethod(
          Invocation.setter(#canUseShortAccumulated, _canUseShortAccumulated),
          returnValueForMissingStub: null);
  @override
  set canUseParameters(bool? _canUseParameters) => super.noSuchMethod(
      Invocation.setter(#canUseParameters, _canUseParameters),
      returnValueForMissingStub: null);
  @override
  set canUseValuables(bool? _canUseValuables) =>
      super.noSuchMethod(Invocation.setter(#canUseValuables, _canUseValuables),
          returnValueForMissingStub: null);
  @override
  List<_i3.Quote> get quoteChars =>
      (super.noSuchMethod(Invocation.getter(#quoteChars),
          returnValue: <_i3.Quote>[]) as List<_i3.Quote>);
  @override
  String get escapeChar =>
      (super.noSuchMethod(Invocation.getter(#escapeChar), returnValue: '')
          as String);
}
